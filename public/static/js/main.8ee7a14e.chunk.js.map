{"version":3,"sources":["Table.js","App.js","index.js"],"names":["CustomTable","_this","this","data","props","sort","a","b","value","map","entry","index","rows","react_default","createElement","id","name","className","Component","defaultProps","App","state","items","mps","ws","Sockette","onopen","e","console","log","onmessage","message","JSON","parse","stringify","handleNewData","setTimeout","setState","Object","toConsumableArray","concat","fetchData","send","stopFetchData","fetch","response","json","defaultData","i","numberItems","push","numberMessages","onClick","Table","ReactDOM","render","src_App","document","getElementById"],"mappings":"+QAGMA,mLAWK,IAAAC,EAAAC,KAGHC,EAAOD,KAAKE,MAAMD,KAAKE,KAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,MAAQF,EAAEE,QACjDC,IAAI,SAACC,EAAOC,GACT,GAAIA,EAAQV,EAAKG,MAAMQ,KACnB,OACIC,EAAAP,EAAAQ,cAAA,UACID,EAAAP,EAAAQ,cAAA,UAAKH,EAAM,GACXE,EAAAP,EAAAQ,cAAA,UAAKJ,EAAMK,IACXF,EAAAP,EAAAQ,cAAA,UAAKJ,EAAMF,OACXK,EAAAP,EAAAQ,cAAA,UAAKJ,EAAMM,SAM/B,OACEH,EAAAP,EAAAQ,cAAA,WACED,EAAAP,EAAAQ,cAAA,SAAOG,UAAU,aACbJ,EAAAP,EAAAQ,cAAA,UACID,EAAAP,EAAAQ,cAAA,UAAID,EAAAP,EAAAQ,cAAA,sBACJD,EAAAP,EAAAQ,cAAA,UAAID,EAAAP,EAAAQ,cAAA,iBACJD,EAAAP,EAAAQ,cAAA,UAAID,EAAAP,EAAAQ,cAAA,oBACJD,EAAAP,EAAAQ,cAAA,UAAID,EAAAP,EAAAQ,cAAA,oBAEPX,WArCae,aAApBlB,EAMKmB,aAAe,CAClBhB,KAAM,GACNS,KAAM,IAoCCZ,QC2CAoB,6MApFbC,MAAQ,CACNC,MAAO,KACPC,IAAK,KACLpB,KAAM,MAIRqB,GAAK,IAAIC,IAAS,sBAAuB,CACvCC,OAAQ,SAAAC,GAAC,OAAIC,QAAQC,IAAI,aAAcF,IACvCG,UAAW,SAAAH,GACT,IAAII,EAAU,KACd,IACEA,EAAUC,KAAKC,MAAMN,EAAExB,MACvB,MAAOwB,GACPC,QAAQC,IAAI,qBAEVE,IACFH,QAAQC,IAAIG,KAAKE,UAAUH,IAC3B9B,EAAKkC,cAAcJ,SA6BzBI,cAAgB,SAAAhC,GAEdiC,WAAW,WACTnC,EAAKoC,SAAS,CACZlC,KAAKmC,OAAAC,EAAA,EAAAD,CAAKrC,EAAKoB,MAAMlB,MAAjBqC,OAAA,CAAuBrC,OAE5B,QAILsC,UAAY,WACVxC,EAAKuB,GAAGkB,KAAK,WAIfC,cAAgB,WACd1C,EAAKuB,GAAGkB,KAAK,iOArCUE,MAAM,2BAAvBC,kBACaA,EAASC,cAI5B,IAJMA,SAEFC,EAAc,GAETC,EAAI,EAAGA,EAAIF,EAAKG,YAAaD,IACpCD,EAAYG,KAAK,CACfnC,GAAIiC,EACJxC,MAAOwC,EACPhC,KAAI,eAAAwB,OAAiBQ,KAIzB9C,KAAKmC,SAAS,CACZf,MAAOwB,EAAKG,YACZ1B,IAAKuB,EAAKK,eACVhD,KAAM4C,uIAyBR,OACElC,EAAAP,EAAAQ,cAAA,WACED,EAAAP,EAAAQ,cAAA,OAAKG,UAAU,YACbJ,EAAAP,EAAAQ,cAAA,MAAIG,UAAU,SAAd,0BACAJ,EAAAP,EAAAQ,cAAA,UAAQsC,QAASlD,KAAKuC,UAAWxB,UAAU,eAA3C,cAGAJ,EAAAP,EAAAQ,cAAA,UAAQsC,QAASlD,KAAKyC,cAAe1B,UAAU,eAA/C,kBAIFJ,EAAAP,EAAAQ,cAACuC,EAAD,CAAOlD,KAAMD,KAAKmB,MAAMlB,KAAMS,KAAMV,KAAKmB,MAAMC,gBA/ErCJ,aCClBoC,IAASC,OAAO1C,EAAAP,EAAAQ,cAAC0C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.8ee7a14e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from \"prop-types\";\n\nclass CustomTable extends Component {\n    static propTypes = {\n        data: PropTypes.array.isRequired,\n        rows: PropTypes.number.isRequired,\n    }\n\n    static defaultProps = {\n        data: [],\n        rows: 10,\n    }\n\n  render() {\n    // Sort the data passed down and then map over the array up\n    // until the number of items in the table\n    let data = this.props.data.sort((a, b) => b.value - a.value)\n        .map((entry, index) => {\n            if (index < this.props.rows) {\n                return (\n                    <tr>\n                        <td>{index+1}</td>\n                        <td>{entry.id}</td>\n                        <td>{entry.value}</td>\n                        <td>{entry.name}</td>\n                    </tr>\n                )\n            }\n        });\n        \n    return (\n      <div> \n        <table className=\"container\">\n            <tr>\n                <th><h1>Entry #</h1></th>\n                <th><h1>ID</h1></th>\n                <th><h1>Value</h1></th>\n                <th><h1>Name</h1></th>\n            </tr>\n            {data}\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default CustomTable;\n","import React, { Component } from 'react';\nimport Sockette from 'sockette';\n\nimport Table from './Table';\n\nclass App extends Component {\n  state = {\n    items: null,\n    mps: null,\n    data: []\n  };\n\n  // Establish Websocket connection\n  ws = new Sockette(\"ws://localhost:7770\", {\n    onopen: e => console.log(\"Connected!\", e),\n    onmessage: e => {\n      let message = null;\n      try {\n        message = JSON.parse(e.data);\n      } catch (e) {\n        console.log(\"malformed message\");\n      }\n      if (message) {\n        console.log(JSON.stringify(message));\n        this.handleNewData(message);\n      }\n    }\n  });\n\n  // After component mounts, fetch num_items and messages_per_second\n  // as well as fill in default data up to the number of items\n  async componentDidMount() {\n    const response = await fetch(\"/api/data\");\n    const json = await response.json();\n\n    let defaultData = [];\n\n    for (let i = 0; i < json.numberItems; i++) {\n      defaultData.push({\n        id: i,\n        value: i,\n        name: `test name - ${i}`\n      });\n    }\n\n    this.setState({\n      items: json.numberItems,\n      mps: json.numberMessages,\n      data: defaultData\n    });\n  }\n\n  // Handles incoming data from websocket\n  handleNewData = data => {\n    // Slightly throttle set state so UI doesn't freeze\n    setTimeout(() => {\n      this.setState({\n        data: [...this.state.data, data]\n      });\n    }, 100);\n  };\n\n  // Method to initiate websocket data flow\n  fetchData = () => {\n    this.ws.send(\"init\");\n  };\n\n  // Method to cancel websocket data flow\n  stopFetchData = () => {\n    this.ws.send(\"close\");\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"top-wrap\">\n          <h1 className=\"title\">React Websocket Update</h1>\n          <button onClick={this.fetchData} className=\"data-button\">\n            Fetch Data\n          </button>\n          <button onClick={this.stopFetchData} className=\"data-button\">\n            Stop Fetching\n          </button>\n        </div>\n        <Table data={this.state.data} rows={this.state.items} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}